{"version":3,"sources":["components/Input/Input.module.css","components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css","components/Button/Button.module.css","components/Section/Section.js","store/contactsSlice.js","components/Button/Button.js","components/Input/Input.js","components/Form/Form.js","components/ContactsList/ContactsList.js","store/filterSlice.js","components/Filter/Filter.js","App.js","store/store.js","index.js","components/Section/Section.module.css"],"names":["module","exports","Section","title","children","className","s","section","nanoid","customAlphabet","contactSlice","createSlice","name","initialState","reducers","formSubmithandle","reducer","state","action","payload","prepare","contact","id","deleteContact","filter","i","visibleContacts","value","toLowerCase","includes","actions","Button","label","formButton","type","Input","labelName","onChange","nameLabel","contactsInput","Form","useState","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","contacts","useSelector","dispatch","useDispatch","handleChange","e","currentTarget","console","log","reset","onSubmit","preventDefault","map","alert","pattern","required","ContactsList","filterContact","normalizedFilter","contactsListItem","contactListBtn","onClick","filterSlice","changeFilter","_","Filter","filterLabel","filterInput","target","App","store","configureStore","contactsReducer","filterContactReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d5d3024.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nameLabel\":\"Input_nameLabel__1tJX2\",\"contactsInput\":\"Input_contactsInput__36Gzm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListBtn\":\"ContactsList_contactListBtn__103hl\",\"contactsListItem\":\"ContactsList_contactsListItem__1lo1e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__2BCb4\",\"filterInput\":\"Filter_filterInput__17VPv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formButton\":\"Button_formButton__2d3NW\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nexport default function Section({ title, children }) {\n  return (\n    <div className={s.section}>\n      {title && <h2 className={s.title}>{title}</h2>}\n      {children}\n    </div>\n  );\n}\nSection.propTypes = {\n  title: PropTypes.string,\n};\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { customAlphabet } from 'nanoid';\r\n\r\nconst nanoid = customAlphabet('0123456789', 8);\r\nconst initialState = [];\r\nconst contactSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState,\r\n  reducers: {\r\n    formSubmithandle: {\r\n      reducer: (state, action) => {\r\n        return [...state, action.payload];\r\n      },\r\n      prepare: contact => ({\r\n        payload: { ...contact, id: nanoid() },\r\n      }),\r\n    },\r\n    deleteContact: (state, action) =>\r\n      state.filter(i => i.id !== action.payload),\r\n\r\n    visibleContacts: (state, action) =>\r\n      state.filter(state =>\r\n        state.value.toLowerCase().includes(action.payload.toLowerCase()),\r\n      ),\r\n  },\r\n});\r\nexport const { formSubmithandle, deleteContact, visibleContacts } =\r\n  contactSlice.actions;\r\nexport default contactSlice.reducer;\r\n","import s from './Button.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Button({ label }) {\n  return (\n    <button className={s.formButton} type=\"submit\">\n      {label}\n    </button>\n  );\n}\nButton.propTypes = {\n  label: PropTypes.string,\n};\n","import s from './Input.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Input({ name, type, labelName, value, onChange }) {\n  return (\n    <label className={s.nameLabel}>\n      {labelName}\n      <input\n        className={s.contactsInput}\n        type={type}\n        name={name}\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nInput.propTypes = {\n  name: PropTypes.string,\n  type: PropTypes.string,\n  labelName: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { formSubmithandle } from 'store/contactsSlice';\n\nimport Button from 'components/Button';\nimport Input from 'components/Input';\nimport shortid from 'shortid';\n\nexport default function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n  const contacts = useSelector(({ contacts }) => contacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    contacts.map(contact => contact.name).includes(name)\n      ? alert(`${name} is already in contacts.`)\n      : dispatch(formSubmithandle({ name, number }));\n    reset();\n  };\n  console.log(name, number);\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  // const formSubmithandle = (){\n\n  // }\n  // const addContacts = () => {\n  //   contacts.map(contact => contact.name).includes(name)\n  //     ? alert(`${name} is already in contacts.`)\n  //     : dispatch(formSubmithandle({ name, number }));\n  //   // dispatch(formSubmithandle({ name, number }));\n  //   // dispatch(formSubmithandle);\n  // };\n  // const addContacts = () => {\n  // console.log(data);\n  // data.id = shortid.generate();\n  // dispatch(formSubmithandle());\n  // };\n  // setContacts(contacts => [...contacts, data]);\n  // if (contacts.find(contact => contact.name === data.name)) {\n  //   alert(`${data.name} is already on contacts`);\n  //   return;\n  // }\n  // if (data.name === '') {\n  //   alert(`please, write the name from the contacts`);\n  //   return;\n  // }\n  // if (data.number === '') {\n  //   alert(`please, write the name from the number`);\n  // }\n  // };\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        labelName=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleChange}\n        id={nameInputId}\n      />\n      <Input\n        labelName=\"Number\"\n        name=\"number\"\n        type=\"tel\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleChange}\n        id={numberInputId}\n      />\n      <Button label=\"Add contact\" onSubmit={formSubmithandle} />\n    </form>\n  );\n}\n","import s from './ContactsList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport { deleteContact } from 'store/contactsSlice';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts);\n  const filterContact = useSelector(state => state.filterContact);\n\n  const visibleContacts = () => {\n    const normalizedFilter = filterContact.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <>\n      <ul>\n        {visibleContacts().map(({ id, name, number }) => (\n          <li key={id} className={s.contactsListItem}>\n            <span> {name}: </span>\n            <span>{number}</span>\n            <button\n              className={s.contactListBtn}\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\nexport default ContactsList;\n","import { createSlice } from '@reduxjs/toolkit';\r\nconst initialState = '';\r\n\r\nconst filterSlice = createSlice({\r\n  name: 'filterContact',\r\n  initialState,\r\n  reducers: {\r\n    changeFilter: (_, action) => action.payload,\r\n  },\r\n});\r\nexport const { changeFilter } = filterSlice.actions;\r\nexport default filterSlice.reducer;\r\nconsole.log(changeFilter());\r\n","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'store/filterSlice';\n\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n  const value = useSelector(state => state.filterContact);\n  console.log(value);\n  const dispatch = useDispatch();\n  return (\n    <label className={s.filterLabel}>\n      Find contacts by name\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(changeFilter(e.target.value))}\n      />\n    </label>\n  );\n}\n","import Section from './components/Section';\nimport Form from './components/Form';\nimport ContactsList from 'components/ContactsList';\nimport Filter from 'components/Filter';\n\nexport default function App() {\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactsList />\n      </Section>\n    </>\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contactsSlice';\r\nimport filterContactReducer from './filterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    filterContact: filterContactReducer,\r\n  },\r\n});\r\n","import 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2VKux\",\"title\":\"Section_title__3QSTF\"};"],"sourceRoot":""}